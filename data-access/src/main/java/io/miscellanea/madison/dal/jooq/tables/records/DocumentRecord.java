/*
 * This file is generated by jOOQ.
 */
package io.miscellanea.madison.dal.jooq.tables.records;


import io.miscellanea.madison.dal.jooq.tables.Document;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DocumentRecord extends UpdatableRecordImpl<DocumentRecord> implements Record7<Long, String, Integer, String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>catalog.document.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>catalog.document.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>catalog.document.title</code>.
     */
    public void setTitle(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>catalog.document.title</code>.
     */
    public String getTitle() {
        return (String) get(1);
    }

    /**
     * Setter for <code>catalog.document.page_count</code>.
     */
    public void setPageCount(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>catalog.document.page_count</code>.
     */
    public Integer getPageCount() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>catalog.document.fingerprint</code>.
     */
    public void setFingerprint(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>catalog.document.fingerprint</code>.
     */
    public String getFingerprint() {
        return (String) get(3);
    }

    /**
     * Setter for <code>catalog.document.content_type</code>.
     */
    public void setContentType(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>catalog.document.content_type</code>.
     */
    public String getContentType() {
        return (String) get(4);
    }

    /**
     * Setter for <code>catalog.document.isbn10</code>.
     */
    public void setIsbn10(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>catalog.document.isbn10</code>.
     */
    public String getIsbn10() {
        return (String) get(5);
    }

    /**
     * Setter for <code>catalog.document.isbn13</code>.
     */
    public void setIsbn13(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>catalog.document.isbn13</code>.
     */
    public String getIsbn13() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, Integer, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Long, String, Integer, String, String, String, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Document.DOCUMENT.ID;
    }

    @Override
    public Field<String> field2() {
        return Document.DOCUMENT.TITLE;
    }

    @Override
    public Field<Integer> field3() {
        return Document.DOCUMENT.PAGE_COUNT;
    }

    @Override
    public Field<String> field4() {
        return Document.DOCUMENT.FINGERPRINT;
    }

    @Override
    public Field<String> field5() {
        return Document.DOCUMENT.CONTENT_TYPE;
    }

    @Override
    public Field<String> field6() {
        return Document.DOCUMENT.ISBN10;
    }

    @Override
    public Field<String> field7() {
        return Document.DOCUMENT.ISBN13;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getTitle();
    }

    @Override
    public Integer component3() {
        return getPageCount();
    }

    @Override
    public String component4() {
        return getFingerprint();
    }

    @Override
    public String component5() {
        return getContentType();
    }

    @Override
    public String component6() {
        return getIsbn10();
    }

    @Override
    public String component7() {
        return getIsbn13();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getTitle();
    }

    @Override
    public Integer value3() {
        return getPageCount();
    }

    @Override
    public String value4() {
        return getFingerprint();
    }

    @Override
    public String value5() {
        return getContentType();
    }

    @Override
    public String value6() {
        return getIsbn10();
    }

    @Override
    public String value7() {
        return getIsbn13();
    }

    @Override
    public DocumentRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public DocumentRecord value2(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public DocumentRecord value3(Integer value) {
        setPageCount(value);
        return this;
    }

    @Override
    public DocumentRecord value4(String value) {
        setFingerprint(value);
        return this;
    }

    @Override
    public DocumentRecord value5(String value) {
        setContentType(value);
        return this;
    }

    @Override
    public DocumentRecord value6(String value) {
        setIsbn10(value);
        return this;
    }

    @Override
    public DocumentRecord value7(String value) {
        setIsbn13(value);
        return this;
    }

    @Override
    public DocumentRecord values(Long value1, String value2, Integer value3, String value4, String value5, String value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DocumentRecord
     */
    public DocumentRecord() {
        super(Document.DOCUMENT);
    }

    /**
     * Create a detached, initialised DocumentRecord
     */
    public DocumentRecord(Long id, String title, Integer pageCount, String fingerprint, String contentType, String isbn10, String isbn13) {
        super(Document.DOCUMENT);

        setId(id);
        setTitle(title);
        setPageCount(pageCount);
        setFingerprint(fingerprint);
        setContentType(contentType);
        setIsbn10(isbn10);
        setIsbn13(isbn13);
    }
}
