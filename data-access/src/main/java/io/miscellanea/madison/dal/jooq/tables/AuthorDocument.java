/*
 * This file is generated by jOOQ.
 */
package io.miscellanea.madison.dal.jooq.tables;


import io.miscellanea.madison.dal.jooq.Catalog;
import io.miscellanea.madison.dal.jooq.Keys;
import io.miscellanea.madison.dal.jooq.tables.records.AuthorDocumentRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorDocument extends TableImpl<AuthorDocumentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>catalog.author_document</code>
     */
    public static final AuthorDocument AUTHOR_DOCUMENT = new AuthorDocument();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthorDocumentRecord> getRecordType() {
        return AuthorDocumentRecord.class;
    }

    /**
     * The column <code>catalog.author_document.author_id</code>.
     */
    public final TableField<AuthorDocumentRecord, Long> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>catalog.author_document.document_id</code>.
     */
    public final TableField<AuthorDocumentRecord, Long> DOCUMENT_ID = createField(DSL.name("document_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private AuthorDocument(Name alias, Table<AuthorDocumentRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthorDocument(Name alias, Table<AuthorDocumentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>catalog.author_document</code> table reference
     */
    public AuthorDocument(String alias) {
        this(DSL.name(alias), AUTHOR_DOCUMENT);
    }

    /**
     * Create an aliased <code>catalog.author_document</code> table reference
     */
    public AuthorDocument(Name alias) {
        this(alias, AUTHOR_DOCUMENT);
    }

    /**
     * Create a <code>catalog.author_document</code> table reference
     */
    public AuthorDocument() {
        this(DSL.name("author_document"), null);
    }

    public <O extends Record> AuthorDocument(Table<O> child, ForeignKey<O, AuthorDocumentRecord> key) {
        super(child, key, AUTHOR_DOCUMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Catalog.CATALOG;
    }

    @Override
    public UniqueKey<AuthorDocumentRecord> getPrimaryKey() {
        return Keys.AUTHOR_DOCUMENT_PKEY;
    }

    @Override
    public List<ForeignKey<AuthorDocumentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.AUTHOR_DOCUMENT__AUTHOR_DOCUMENT_AUTHOR_ID_FKEY, Keys.AUTHOR_DOCUMENT__AUTHOR_DOCUMENT_DOCUMENT_ID_FKEY);
    }

    private transient Author _author;
    private transient Document _document;

    /**
     * Get the implicit join path to the <code>catalog.author</code> table.
     */
    public Author author() {
        if (_author == null)
            _author = new Author(this, Keys.AUTHOR_DOCUMENT__AUTHOR_DOCUMENT_AUTHOR_ID_FKEY);

        return _author;
    }

    /**
     * Get the implicit join path to the <code>catalog.document</code> table.
     */
    public Document document() {
        if (_document == null)
            _document = new Document(this, Keys.AUTHOR_DOCUMENT__AUTHOR_DOCUMENT_DOCUMENT_ID_FKEY);

        return _document;
    }

    @Override
    public AuthorDocument as(String alias) {
        return new AuthorDocument(DSL.name(alias), this);
    }

    @Override
    public AuthorDocument as(Name alias) {
        return new AuthorDocument(alias, this);
    }

    @Override
    public AuthorDocument as(Table<?> alias) {
        return new AuthorDocument(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthorDocument rename(String name) {
        return new AuthorDocument(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthorDocument rename(Name name) {
        return new AuthorDocument(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthorDocument rename(Table<?> name) {
        return new AuthorDocument(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
