/*
 * This file is generated by jOOQ.
 */
package io.miscellanea.madison.dal.jooq.tables;


import io.miscellanea.madison.dal.jooq.Catalog;
import io.miscellanea.madison.dal.jooq.Indexes;
import io.miscellanea.madison.dal.jooq.Keys;
import io.miscellanea.madison.dal.jooq.tables.records.IdentifiersRecord;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Identifiers extends TableImpl<IdentifiersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>catalog.identifiers</code>
     */
    public static final Identifiers IDENTIFIERS = new Identifiers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IdentifiersRecord> getRecordType() {
        return IdentifiersRecord.class;
    }

    /**
     * The column <code>catalog.identifiers.id</code>.
     */
    public final TableField<IdentifiersRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>catalog.identifiers.doc_id</code>.
     */
    public final TableField<IdentifiersRecord, Long> DOC_ID = createField(DSL.name("doc_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>catalog.identifiers.isbn_10</code>.
     */
    public final TableField<IdentifiersRecord, String> ISBN_10 = createField(DSL.name("isbn_10"), SQLDataType.CHAR(10), this, "");

    /**
     * The column <code>catalog.identifiers.isbn_13</code>.
     */
    public final TableField<IdentifiersRecord, String> ISBN_13 = createField(DSL.name("isbn_13"), SQLDataType.CHAR(13), this, "");

    private Identifiers(Name alias, Table<IdentifiersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Identifiers(Name alias, Table<IdentifiersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>catalog.identifiers</code> table reference
     */
    public Identifiers(String alias) {
        this(DSL.name(alias), IDENTIFIERS);
    }

    /**
     * Create an aliased <code>catalog.identifiers</code> table reference
     */
    public Identifiers(Name alias) {
        this(alias, IDENTIFIERS);
    }

    /**
     * Create a <code>catalog.identifiers</code> table reference
     */
    public Identifiers() {
        this(DSL.name("identifiers"), null);
    }

    public <O extends Record> Identifiers(Table<O> child, ForeignKey<O, IdentifiersRecord> key) {
        super(child, key, IDENTIFIERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Catalog.CATALOG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDENTIFIERS_FK_DOC_ID);
    }

    @Override
    public Identity<IdentifiersRecord, Long> getIdentity() {
        return (Identity<IdentifiersRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<IdentifiersRecord> getPrimaryKey() {
        return Keys.IDENTIFIERS_PKEY;
    }

    @Override
    public List<ForeignKey<IdentifiersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.IDENTIFIERS__IDENTIFIERS_DOC_ID_FKEY);
    }

    private transient Document _document;

    /**
     * Get the implicit join path to the <code>catalog.document</code> table.
     */
    public Document document() {
        if (_document == null)
            _document = new Document(this, Keys.IDENTIFIERS__IDENTIFIERS_DOC_ID_FKEY);

        return _document;
    }

    @Override
    public Identifiers as(String alias) {
        return new Identifiers(DSL.name(alias), this);
    }

    @Override
    public Identifiers as(Name alias) {
        return new Identifiers(alias, this);
    }

    @Override
    public Identifiers as(Table<?> alias) {
        return new Identifiers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Identifiers rename(String name) {
        return new Identifiers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Identifiers rename(Name name) {
        return new Identifiers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Identifiers rename(Table<?> name) {
        return new Identifiers(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
