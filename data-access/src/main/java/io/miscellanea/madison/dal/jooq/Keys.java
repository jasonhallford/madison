/*
 * This file is generated by jOOQ.
 */
package io.miscellanea.madison.dal.jooq;


import io.miscellanea.madison.dal.jooq.tables.Author;
import io.miscellanea.madison.dal.jooq.tables.AuthorDocument;
import io.miscellanea.madison.dal.jooq.tables.Document;
import io.miscellanea.madison.dal.jooq.tables.Identifiers;
import io.miscellanea.madison.dal.jooq.tables.records.AuthorDocumentRecord;
import io.miscellanea.madison.dal.jooq.tables.records.AuthorRecord;
import io.miscellanea.madison.dal.jooq.tables.records.DocumentRecord;
import io.miscellanea.madison.dal.jooq.tables.records.IdentifiersRecord;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

/**
 * A class modelling foreign key relationships and constraints of tables in
 * catalog.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AuthorRecord> AUTHOR_PKEY = Internal.createUniqueKey(Author.AUTHOR, DSL.name("author_pkey"), new TableField[] { Author.AUTHOR.ID }, true);
    public static final UniqueKey<AuthorDocumentRecord> AUTHOR_DOCUMENT_PKEY = Internal.createUniqueKey(AuthorDocument.AUTHOR_DOCUMENT, DSL.name("author_document_pkey"), new TableField[] { AuthorDocument.AUTHOR_DOCUMENT.AUTHOR_ID, AuthorDocument.AUTHOR_DOCUMENT.DOCUMENT_ID }, true);
    public static final UniqueKey<DocumentRecord> DOCUMENT_FINGERPRINT_KEY = Internal.createUniqueKey(Document.DOCUMENT, DSL.name("document_fingerprint_key"), new TableField[] { Document.DOCUMENT.FINGERPRINT }, true);
    public static final UniqueKey<DocumentRecord> DOCUMENT_PKEY = Internal.createUniqueKey(Document.DOCUMENT, DSL.name("document_pkey"), new TableField[] { Document.DOCUMENT.ID }, true);
    public static final UniqueKey<IdentifiersRecord> IDENTIFIERS_PKEY = Internal.createUniqueKey(Identifiers.IDENTIFIERS, DSL.name("identifiers_pkey"), new TableField[] { Identifiers.IDENTIFIERS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AuthorDocumentRecord, AuthorRecord> AUTHOR_DOCUMENT__AUTHOR_DOCUMENT_AUTHOR_ID_FKEY = Internal.createForeignKey(AuthorDocument.AUTHOR_DOCUMENT, DSL.name("author_document_author_id_fkey"), new TableField[] { AuthorDocument.AUTHOR_DOCUMENT.AUTHOR_ID }, Keys.AUTHOR_PKEY, new TableField[] { Author.AUTHOR.ID }, true);
    public static final ForeignKey<AuthorDocumentRecord, DocumentRecord> AUTHOR_DOCUMENT__AUTHOR_DOCUMENT_DOCUMENT_ID_FKEY = Internal.createForeignKey(AuthorDocument.AUTHOR_DOCUMENT, DSL.name("author_document_document_id_fkey"), new TableField[] { AuthorDocument.AUTHOR_DOCUMENT.DOCUMENT_ID }, Keys.DOCUMENT_PKEY, new TableField[] { Document.DOCUMENT.ID }, true);
    public static final ForeignKey<IdentifiersRecord, DocumentRecord> IDENTIFIERS__IDENTIFIERS_DOC_ID_FKEY = Internal.createForeignKey(Identifiers.IDENTIFIERS, DSL.name("identifiers_doc_id_fkey"), new TableField[] { Identifiers.IDENTIFIERS.DOC_ID }, Keys.DOCUMENT_PKEY, new TableField[] { Document.DOCUMENT.ID }, true);
}
